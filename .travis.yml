---
sudo: required
dist: bionic
env:
  global:
  # auto vagrant installation

notifications:
  slack:
    on_failure: always

fleet_script_microk8s_tasks : &fleet_script_microk8s_tasks
        - sudo rm -rf /var/snap/microk8s/common/var/lib/containerd
        - ls -l /var/snap/microk8s/current/args/containerd-template.toml
        # - sudo sed 's%snapshotter = "overlayfs"%snapshotter = "zfs"%g' /var/snap/microk8s/current/args/containerd-template.toml
        # - sudo zfs create -o mountpoint=/var/snap/microk8s/common/var/lib/containerd/io.containerd.snapshotter.v1.zfs $POOL/containerd
        - sudo microk8s start
        - sudo microk8s status
        - sudo microk8s stop

fleet_script_multipass_cloudinit_jenkins_tasks : &fleet_script_multipass_cloudinit_jenkins_tasks
      script:
        - export VM_NAME="VM01"
        - export CPU="1"
        - export MEMORY="4G"
        - export DISK="5G"
        - export CLOUD_INIT_FILE="config/cloud-init-jenkins.yaml"
        - VM_IMAGE="20.04"
        - sudo multipass find #listing of all the available Ubuntu images
        - ls -l /var/snap/multipass/common/multipass_socket #
        - |
          if [ "$( sudo multipass list | grep -c "$VM_NAME")"   -ne 0  ] 2>/dev/null; then
            echo "VM: $VM_NAME is Provisioned"
          else
            echo "VM: $VM_NAME Yet To Be Provisioned."
          fi
        - echo "$VM_NAME  provision started"
        - start=$(date +%s)
        - sudo multipass launch -c"$CPU" -m"$MEMORY" -d"$DISK" -n "$VM_NAME" "$VM_IMAGE" --cloud-init "$CLOUD_INIT_FILE"
        - end=$(date +%s) &&  runtime=$((end-start))
        - echo $runtime
        - |
          while :
          do
              status=$(sudo multipass ls | grep "$VM_NAME"  |  awk '{print $2}')
              [ ! $status = "Running"  ] || break
              sleep 5
              echo "Waiting $VM_NAME VM to be running"
          done
        - sudo multipass exec "$VM_NAME" -- tail  -n 20  /var/log/cloud-init-output.log
        # - sudo multipass exec "$VM_NAME" -- service jenkins status #Verify Jenkins is running using the service command
        - sudo multipass exec "$VM_NAME" -- sudo cat /var/lib/jenkins/secrets/initialAdminPassword #View the initialAdminPassword for Jenkins install
        - MULTIPASS_VM_IP=$(multipass info $VM_NAME | grep 'IPv4' | awk '{print $2}') && echo $MULTIPASS_VM_IP
        - sudo multipass list
        # - sudo multipass shell "$VM_NAME"
        - sudo multipass delete "$VM_NAME" && sudo multipass purge
        - echo "$VM_NAME destroyed"
        - sudo multipass list

fleet_script_multipass_cloudinit_tasks : &fleet_script_multipass_cloudinit_tasks
      script:
        - VM_NAME="VM01"
        - CPU="1"
        - MEMORY="4G"
        - DISK="5G"
        - CLOUD_INIT_FILE="config/cloud-init.yaml"
        - ls -l /var/snap/multipass/common/multipass_socket #
        - |
          if [ "$( sudo multipass list | grep -c "$VM_NAME")"   -ne 0  ] 2>/dev/null; then
            echo "VM: $VM_NAME is Provisioned"
          else
            echo "VM: $VM_NAME Yet To Be Provisioned."
          fi
        - echo "$VM_NAME  provision started"
        - start=$(date +%s)
        - sudo multipass launch -c"$CPU" -m"$MEMORY" -d"$DISK" -n "$VM_NAME" lts --cloud-init "$CLOUD_INIT_FILE"
        - end=$(date +%s) &&  runtime=$((end-start))
        - echo $runtime
        - |
          while :
          do
              status=$(sudo multipass ls | grep "$VM_NAME"  |  awk '{print $2}')
              [ ! $status = "Running"  ] || break
              sleep 5
              echo "Waiting $VM_NAME VM to be running"
          done
        - sudo multipass exec "$VM_NAME" -- tail  -n 20  /var/log/cloud-init-output.log
        - sudo multipass list
        # - sudo multipass shell "$VM_NAME"
        - sudo multipass delete "$VM_NAME" && sudo multipass purge
        - echo "$VM_NAME destroyed"
        - sudo multipass list

#https://www.terraform.io/downloads.html
fleet_script_arm_terraform_deploy_tasks : &fleet_script_arm_terraform_deploy_tasks
      script:
        - sudo apt-get install -qqy unzip
        - TERRAFORM_VERSION="0.12.26"
        - wget https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_$TERRAFORM_VERSION_linux_arm.zip
        - # - wget https://releases.hashicorp.com/terraform/0.12.26/terraform_0.12.26_linux_arm.zip
        - unzip terraform_$TERRAFORM_VERSION_linux_amd64.zip
        - sudo mv terraform /usr/local/bin/
        - terraform --version
fleet_script_terraform_deploy_tasks : &fleet_script_terraform_deploy_tasks
      script:
        - sudo apt-get install -qqy unzip
        - TERRAFORM_VERSION="0.12.26"
        - wget https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_$TERRAFORM_VERSION_linux_amd64.zip
        - # - wget https://releases.hashicorp.com/terraform/0.12.26/terraform_0.12.26_linux_amd64.zip
        - unzip terraform_$TERRAFORM_VERSION_linux_amd64.zip
        - sudo mv terraform /usr/local/bin/
        - terraform --version
fleet_script_tasks : &fleet_script_tasks
      script:
        - python --version
fleet_install_tasks : &fleet_install_tasks
      install:
        - pip install -r requirements.txt


matrix:
  fast_finish: true
  include:

    - name: "multipass cloud-init Python 3.7 on bionic" #OK
      dist: bionic
      addons:
        snaps:
          - name: multipass
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      # env:
      #   - VM_NAME="VM01"
      #   - CPU="1"
      #   - MEMORY="4G"
      #   - DISK="5G"
      #   - CLOUD_INIT_FILE="config/cloud-init.yaml"
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_terraform_deploy_tasks
      script:
        - make launch-manager
        - make launch-client
        - make list
      after_success:
        - deactivate



# # # #============================================================================ multiarch linux ============================================================================

    #https://multipass.run/docs/launch-command
    - name: "multipass cloud-init jenkins Python 3.7 on bionic arm64"
      os: linux
      arch: arm64
      # dist: xenial #Cannot check BIOS for determining KVM extensions support,Unable to load KVM support. Please ensure KVM is installed on your machine.
      dist: bionic
      addons:
        snaps:
          - name: multipass
            confinement: classic # or devmode
            channel: latest/beta # will be passed to --channel flag
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      # env:
        # - VM_NAME="VM01"
        # - CPU="1"
        # - MEMORY="4G"
        # - DISK="5G"
        # - CLOUD_INIT_FILE="config/cloud-init-jenkins.yaml"
        # - VM_IMAGE="20.04"
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - kvm-ok #check whether the KVM is installed
        - sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils -qqy
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_arm_terraform_deploy_tasks      
      script:
        - make launch-manager
        - make launch-client
        - make list
      after_success:
        - deactivate

#
#     - name: "multipass microk8s  edge Python 3.7 on bionic arm64"
#       os: linux
#       arch: arm64
#       # dist: xenial #Cannot check BIOS for determining KVM extensions support,Unable to load KVM support. Please ensure KVM is installed on your machine.
#       dist: bionic
#       addons:
#         snaps:
#           - name: multipass
#             confinement: classic # or devmode
#             channel: latest/beta # will be passed to --channel flag
#           - name: microk8s
#             confinement: classic # or devmode
#             channel: latest/stable # will be passed to --channel flag
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_multipass_cloudinit_jenkins_tasks
#       script:
#         - snap info multipass
#         - snap info microk8s #All the currently available channels
#       after_success:
#         - deactivate
